import os
import time
from scapy.all import *
from collections import defaultdict
import logging

# Configuration
PACKET_THRESHOLD = 100  # Number of packets from a single IP to trigger blocking
BLOCK_TIME = 5          # Time in seconds to block the IP
LOG_FILE = "ddos_report.txt"

# Set up logging
logging.basicConfig(filename=LOG_FILE, level=logging.INFO, format='%(asctime)s - %(message)s')

# Dictionary to count packets from each IP
ip_count = defaultdict(int)
blocked_ips = set()

def log_attack(ip, count):
    logging.info(f"Detected DDoS attack from IP: {ip} with {count} packets")

def block_ip(ip):
    try:
        os.system(f"iptables -A INPUT -s {ip} -j DROP")
        print(f"Blocked IP: {ip}")
        blocked_ips.add(ip)
    except Exception as e:
        logging.error(f"Error blocking IP {ip}: {e}")

def unblock_ip(ip):
    try:
        os.system(f"iptables -D INPUT -s {ip} -j DROP")
        print(f"Unblocked IP: {ip}")
        blocked_ips.remove(ip)
    except Exception as e:
        logging.error(f"Error unblocking IP {ip}: {e}")

def packet_handler(packet):
    if IP in packet:
        src_ip = packet[IP].src
        ip_count[src_ip] += 1
        
        # Check if the packet count exceeds the threshold
        if ip_count[src_ip] >= PACKET_THRESHOLD and src_ip not in blocked_ips:
            log_attack(src_ip, ip_count[src_ip])
            block_ip(src_ip)
            time.sleep(BLOCK_TIME)  # Keep the IP blocked for a specified time
            unblock_ip(src_ip)  # Unblock the IP after the specified time
            ip_count[src_ip] = 0  # Reset the count for the IP

def main():
    print("Starting DDoS detection...")
    # Start sniffing packets
    sniff(prn=packet_handler, store=0)

if __name__ == "__main__":
    main()
